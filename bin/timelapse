#!/usr/bin/env node

/**
 * Rasperrypi Node Time Lapse script
 * @author jamiegilmartin@gmail.com
 * @see http://www.netmagazine.com/tutorials/build-command-line-app-nodejs
 *
 *
 *
 */

var terminal = require('child_process').spawn('bash');
var fs = require('fs');
var argv = process.argv.slice(2);


var TimeLapse = {
	init : function(){
		var self = this;
		this.canStart = true;
		
		//defaults //TODO: for now
		this.output = 'output'; //a directory
		this.directory = this.output + '/stills';
		this.delay = 8000;
		this.increment = 0;
		this.maxPics = 1000;
		this.timer = null; 

		//TODO: command for amount of time, new Date thing

		this.parseArgv();

		//start
		if(this.canStart) this.startTakingPics();
	},
	parseArgv : function(){
		var self = this;
		//parse args
		if(argv[0] === "--help" || argv[0] === "-h"){
			this.help();
		}else{
			//loop through args and parse
			for(var i=0;i<argv.length;i++){
				
				//set delay
				if(argv[i] === '-delay'){
					this.setOptions('delay',argv[i+1]);
				}
				//set maxPics
				if(argv[i] === '-max'){
					this.setOptions('maxPics',argv[i+1]);
				}
				//set directory
				if(argv[i] === '-dir'){
					var dir = self.output +'/' + argv[i+1];
					
					this.canStart = false;//prevent from starting until callback
					
					//check if there is directory
					fs.exists(dir, function (exists) {
					  if(exists){
					  	//TODO : are you sure you want to add to: read dir
					  	self.setOptions('directory', dir);
					  }else{
					  	//make it
					  	fs.mkdir(dir,function(){
					  		console.log('directory ' + dir + ' created');
					  		self.setOptions('directory', dir);
							self.startTakingPics();
					  	});
					  }
					});
				}
			}
		}
	},
	setOptions : function(param, value){
		this[param] = value;
		console.log('set', param, this[param]);

	},
	startTakingPics : function(){
		var self = this;
		var takingPics = true;
		
		function loop(){
			self.takePic();
			if(takingPics)
			self.timer = setTimeout(loop, self.delay);
		}
		this.timer = setTimeout(loop, this.delay);
		
		//first pic
		this.takePic();
	},
	takePic : function(){
		var date = new Date();
		var fileName = "timeLapse-img_"+this.increment +"_date-"+(date.getMonth()+1)+"-"+date.getDate()+"-"+date.getFullYear()+"_"+date.getHours()+"-"+date.getMinutes()+"-"+date.getSeconds()+".jpg";
		var command = "raspistill -o "+this.directory+"/"+fileName;
		
		if(this.increment < this.maxPics){
			console.log('take pic',terminal.pid,this.increment,command)

			//command
			terminal.stdin.write(command+'\n');

		}else{
			console.log('reached the max');
			takingPics = false;
			//clearTimeout(this.timer);//process keeps running if you don't clear
			terminal.stdin.end();
			
			this.createFileList();
		}

		this.increment += 1;
		
	},
	//if you want to see what's in a dir
	//@deprecated ? not used yet
	readDir : function( dir ){
		function action(ac){
			console.log(ac);
		}

		fs.readdir(dir, function (err, files) {
			if (err) return action(err);
			// For every file in the list
			files.forEach(function(file) {
				// Full path of that file
				console.log(file)
			});
		});
		
	},
	createFileList : function(){
		console.log('creating file list at '+this.directory);
		var command1 = 'cd '+this.directory;
		var command2 = "ls -t >  stills.txt";
		
		//command
		terminal.stdin.write(command1+'\n');
		terminal.stdin.write(command2+'\n');
		
		
		this.compileVideo();
	},
	compileVideo : function(){
		console.log('compiling video');
		
		var command = 'mencoder -nosound -ovc lavc -lavcopts vcodec=mpeg4:aspect=16/9:vbitrate=8000000 -vf scale=1920:1080 -o video.avi -mf type=jpeg:fps=24 mf://@stills.txt';
		
		terminal.stdin.write(command+'\n');
		
		terminal.stdin.end();
		console.log('compiling video complete');
	},
	help : function(){
		var help = "";
		help += "commands:\n";
		help += "-delay (sets delay, so type -delay 5000 or something)\n";
		help += "-dir (sets directory, so type dir_name to create place where you want your stills)\n";
		help += "-max (sets maximum number of pics, so type max_number_of_pics to set a limit otherwise it's 1000)\n";
		console.log(help);
		
		terminal.kill();
	}
};

//initialize
TimeLapse.init();

//terminal I/O
terminal.stdout.on('data', function (data) {
    console.log('stdout: ' + data);
});

terminal.on('exit', function (code) {
    console.log('child process exited with code ' + code);
});

/*
//on exit
process.on('exit', function() {
  console.log('About to exit.');
});
*/
/*
setTimeout(function() {	
    console.log('Sending stdin to terminal');
   	terminal.stdin.write('echo "Hello $USER"');
   	//terminal.stdin.write('raspistill -o image.jpg');
	terminal.stdin.end();
}, 1000);
*/
